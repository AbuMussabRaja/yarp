sudo: required
dist: trusty

os:
  - linux
  - osx

language:
  - cpp

compiler:
  - gcc
  - clang

env:
  # Normal build
  - TRAVIS_WITH_ACE=true TRAVIS_WITH_INTEGRATION_TESTS=false TRAVIS_CMAKE_GENERATOR="Unix Makefiles" TRAVIS_BUILD_TYPE=DebugFull
  # Normal build with ninja
  - TRAVIS_WITH_ACE=true TRAVIS_WITH_INTEGRATION_TESTS=false TRAVIS_CMAKE_GENERATOR="Ninja" TRAVIS_BUILD_TYPE=DebugFull
  # No ACE build
  - TRAVIS_WITH_ACE=false TRAVIS_WITH_INTEGRATION_TESTS=false TRAVIS_CMAKE_GENERATOR="Unix Makefiles" TRAVIS_BUILD_TYPE=DebugFull
  # Normal build with integration tests (likely to fail due to timeout)
  - TRAVIS_WITH_ACE=true TRAVIS_WITH_INTEGRATION_TESTS=true TRAVIS_CMAKE_GENERATOR="Unix Makefiles" TRAVIS_BUILD_TYPE=DebugFull

matrix:
  exclude:
    - os: osx

  include:
    # Coverage build
    - os: linux
      compiler: gcc
      env: TRAVIS_WITH_ACE=true TRAVIS_WITH_INTEGRATION_TESTS=false TRAVIS_CMAKE_GENERATOR="Unix Makefiles" TRAVIS_BUILD_TYPE=DebugFull
    # OSX, Unix Makefiles, gcc build
    - os: osx
      compiler: gcc
      env: TRAVIS_WITH_ACE=true TRAVIS_WITH_INTEGRATION_TESTS=false TRAVIS_CMAKE_GENERATOR="Unix Makefiles" TRAVIS_BUILD_TYPE=DebugFull
    # OSX, Unix Makefiles, clang build
    - os: osx
      compiler: clang
      env: TRAVIS_WITH_ACE=true TRAVIS_WITH_INTEGRATION_TESTS=false TRAVIS_CMAKE_GENERATOR="Unix Makefiles" TRAVIS_BUILD_TYPE=DebugFull
    # OSX, Xcode, clang build
    - os: osx
      compiler: clang
      env: TRAVIS_WITH_ACE=true TRAVIS_WITH_INTEGRATION_TESTS=false TRAVIS_CMAKE_GENERATOR="Xcode" TRAVIS_BUILD_TYPE=DebugFull

  allow_failures:
    - env: TRAVIS_WITH_ACE=true TRAVIS_WITH_INTEGRATION_TESTS=true TRAVIS_CMAKE_GENERATOR="Unix Makefiles" TRAVIS_BUILD_TYPE=DebugFull
    - os: osx
      compiler: clang
      env: TRAVIS_WITH_ACE=true TRAVIS_WITH_INTEGRATION_TESTS=false TRAVIS_CMAKE_GENERATOR="Xcode" TRAVIS_BUILD_TYPE=DebugFull

branches:
  except:
    - /^*appveyor*$/

notifications:
  irc:
    channels:
      - "chat.freenode.net#yarpers"
    template:
      - "%{repository}/%{branch} (%{commit} - %{author}): %{build_url}: %{message}"
    use_notice: true
    skip_join: true

before_install:
  - if $TRAVIS_WITH_INTEGRATION_TESTS; then wget https://github.com/paulfitz/swigs/releases/download/v0.0.4/swigs.zip; fi
  - if $TRAVIS_WITH_INTEGRATION_TESTS; then unzip -q swigs.zip; mkdir -p cache; mv swigs cache/swig; fi
  - if $TRAVIS_WITH_INTEGRATION_TESTS; then export ROS_CI_DESKTOP=`lsb_release -cs`; fi
  - if $TRAVIS_WITH_INTEGRATION_TESTS; then export ROS_CI_VERSION=indigo; fi
  - if $TRAVIS_WITH_INTEGRATION_TESTS; then export ROS_CI_PREFIX=ros-${ROS_CI_VERSION}-; fi
  - if $TRAVIS_WITH_INTEGRATION_TESTS; then export ROS_HOSTNAME=localhost; fi
  - if $TRAVIS_WITH_INTEGRATION_TESTS; then export ROS_MASTER_URI=http://localhost:11311; fi
  - if $TRAVIS_WITH_INTEGRATION_TESTS; then export ROBOT=sim; fi
  - if $TRAVIS_WITH_INTEGRATION_TESTS; then echo "deb http://packages.ros.org/ros/ubuntu $ROS_CI_DESKTOP main" | sudo tee /etc/apt/sources.list.d/ros-latest.list; fi
  - if $TRAVIS_WITH_INTEGRATION_TESTS; then wget http://packages.ros.org/ros.key -O - | sudo apt-key add -; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get update -qq; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew tap homebrew/x11; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew tap homebrew/science; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew update; fi

install:
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install cmake libgsl0-dev; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if $TRAVIS_WITH_ACE; then sudo apt-get -y install libace-dev; fi; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if [ "$TRAVIS_CMAKE_GENERATOR" == "Ninja" ]; then sudo apt-get install ninja-build; fi; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew install yarp --only-dependencies; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew install gtkmm gtk+; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew link --force gettext; fi # Fix goocanvas build
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew install qt5; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew install swig; fi
  - if $TRAVIS_WITH_INTEGRATION_TESTS; then sudo apt-get -y install liblua5.1-0-dev lua5.1 tcl-dev tk-dev mono-gmcs; fi
  - if $TRAVIS_WITH_INTEGRATION_TESTS; then sudo apt-get -y install ${ROS_CI_PREFIX}desktop-full; fi
  - if $TRAVIS_WITH_INTEGRATION_TESTS; then sudo rosdep init && rosdep update; fi
  - if $TRAVIS_WITH_INTEGRATION_TESTS; then source /opt/ros/${ROS_CI_VERSION}/setup.bash; fi
  - if [ "$TRAVIS_BUILD_TYPE" == "Profile" ]; then sudo apt-get -y install lcov; fi
  - if [ "$TRAVIS_BUILD_TYPE" == "Profile" ]; then gem install coveralls-lcov; fi
 # install the gnu debugger for later use in reading the core file
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get -y install gdb; fi

before_script:
  - cmake --version
  - mkdir -p build
  - cd build
  - if $TRAVIS_WITH_INTEGRATION_TESTS; then ln -s ../cache cache; fi
  - . ../scripts/admin/generate-cmake-options.sh $(hostname) $(lsb_release -cs) continuous
  - export YARP_CMAKE_OPTIONS=" $CMAKE_OPTIONS"
  - if ! $TRAVIS_WITH_ACE; then export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DSKIP_ACE=TRUE -DYARP_TEST_HEAP=TRUE"; fi
  - if $TRAVIS_WITH_INTEGRATION_TESTS; then export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DYARP_TEST_INTEGRATION=TRUE"; fi
  - cmake -G"${TRAVIS_CMAKE_GENERATOR}" -DCMAKE_BUILD_TYPE=${TRAVIS_BUILD_TYPE} ${YARP_CMAKE_OPTIONS} ..
  - if [ "$TRAVIS_BUILD_TYPE" == "Profile" ]; then lcov --directory . --zerocounters; fi
  - cd ..
 # What is the current file size max for core files?
 # It is usually 0, which means no core file will be dumped if there is a crash
  - ulimit -c
 # Set the core file limit to unlimited so a core file is generated upon crash
  - ulimit -c unlimited -S

script:
  - cd build
  - cmake --build . --config ${TRAVIS_BUILD_TYPE}
  - if $TRAVIS_WITH_INTEGRATION_TESTS; then bin/yarp conf 0 0 local; fi
  - ctest -VV --build . -C ${TRAVIS_BUILD_TYPE}
  - ctest -N --build . -C ${TRAVIS_BUILD_TYPE}
  - while $(pwd)/bin/harness_os regression PortTest; do :; done
  - for i in $(find ./ -maxdepth 1 -name 'core*' -print); do gdb $(pwd)/bin/harness_os core* -ex "thread apply all bt" -ex "set pagination 0" -batch; done;
  - cd ..

after_success:
  - cd build
  # capture coverage info
  - if [ "$TRAVIS_BUILD_TYPE" == "Profile" ]; then lcov --directory . --capture --output-file coverage.info; fi
  # filter out system and test code
  - if [ "$TRAVIS_BUILD_TYPE" == "Profile" ]; then lcov --remove coverage.info '/usr/*' 'tests/*' 'example/*' 'extern/*' 'idls/*' '*/harness/*' 'yarp/build/*' 'src/libYARP_sig/*' 'src/libYARP_serversql/*' 'src/libYARP_name/*' 'src/libYARP_dev/*' 'src/libYARP_math/*' --output-file coverage.info; fi
  # debug before upload
  - if [ "$TRAVIS_BUILD_TYPE" == "Profile" ]; then lcov --list coverage.info; fi
  # uploads to coveralls
  - if [ "$TRAVIS_BUILD_TYPE" == "Profile" ]; then coveralls-lcov --source-encoding=ISO-8859-1 coverage.info; fi
  - cd ..
